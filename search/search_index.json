{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao bolt.diy","text":"<p>Bolt.diy \u00e9 uma plataforma de desenvolvimento que permite criar, editar e executar aplica\u00e7\u00f5es web diretamente no navegador. Com suporte para modelos de linguagem locais e em nuvem, o bolt.diy oferece uma experi\u00eancia de desenvolvimento flex\u00edvel e poderosa.</p>"},{"location":"#recursos-principais","title":"Recursos Principais","text":"<ul> <li>Desenvolvimento no Navegador: Crie e edite aplica\u00e7\u00f5es web sem necessidade de instala\u00e7\u00e3o local</li> <li>Suporte para LLMs: Integra\u00e7\u00e3o com modelos de linguagem locais e em nuvem</li> <li>Ambiente de Desenvolvimento Completo: Editor de c\u00f3digo, terminal e visualiza\u00e7\u00e3o em tempo real</li> <li>Personaliza\u00e7\u00e3o: Adapte o ambiente de desenvolvimento \u00e0s suas necessidades</li> </ul>"},{"location":"#comecando","title":"Come\u00e7ando","text":"<p>Para come\u00e7ar a usar o bolt.diy, siga estas etapas:</p> <ol> <li>Clone o reposit\u00f3rio</li> <li>Instale as depend\u00eancias</li> <li>Configure as vari\u00e1veis de ambiente</li> <li>Inicie o servidor de desenvolvimento</li> </ol> <p>Consulte nossa documenta\u00e7\u00e3o de instala\u00e7\u00e3o para instru\u00e7\u00f5es detalhadas.</p>"},{"location":"#contribuindo","title":"Contribuindo","text":"<p>Agradecemos contribui\u00e7\u00f5es da comunidade! Se voc\u00ea gostaria de contribuir, por favor:</p> <ol> <li>Leia nosso guia de contribui\u00e7\u00e3o</li> <li>Verifique os problemas abertos</li> <li>Envie um pull request</li> </ol>"},{"location":"#suporte","title":"Suporte","text":"<p>Se voc\u00ea encontrar problemas ou tiver d\u00favidas:</p> <ul> <li>Consulte nossa FAQ</li> <li>Abra um problema</li> <li>Junte-se \u00e0 nossa comunidade</li> </ul>"},{"location":"#licenca","title":"Licen\u00e7a","text":"<p>O bolt.diy \u00e9 licenciado sob a Licen\u00e7a MIT.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Join the community!</li> <li>Features</li> <li>Setup</li> <li>Prerequisites</li> <li>Clone the Repository</li> <li>Entering API Keys<ul> <li>1. Set API Keys in the <code>.env.local</code> File</li> <li>2. Configure API Keys Directly in the Application</li> </ul> </li> <li>Run the Application</li> <li>Option 1: Without Docker</li> <li>Option 2: With Docker</li> <li>Update Your Local Version to the Latest</li> <li>Adding New LLMs</li> <li>Available Scripts</li> <li>Development</li> <li>Tips and Tricks</li> </ul>"},{"location":"#join-the-community","title":"Join the community!","text":"<p>Join the community!</p> <p>Also this pinned post in our community has a bunch of incredible resources for running and deploying bolt.diy yourself!</p>"},{"location":"#features","title":"Features","text":"<ul> <li>AI-powered full-stack web development directly in your browser.</li> <li>Support for multiple LLMs with an extensible architecture to integrate additional models.</li> <li>Attach images to prompts for better contextual understanding.</li> <li>Integrated terminal to view output of LLM-run commands.</li> <li>Revert code to earlier versions for easier debugging and quicker changes.</li> <li>Download projects as ZIP for easy portability.</li> <li>Integration-ready Docker support for a hassle-free setup.</li> </ul>"},{"location":"#setup","title":"Setup","text":"<p>If you're new to installing software from GitHub, don't worry! If you encounter any issues, feel free to submit an \"issue\" using the provided links or improve this documentation by forking the repository, editing the instructions, and submitting a pull request. The following instruction will help you get the stable branch up and running on your local machine in no time.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Git: Download Git</li> <li> <p>Install Node.js: Download Node.js</p> </li> <li> <p>After installation, the Node.js path is usually added to your system automatically. To verify:</p> <ul> <li>Windows: Search for \"Edit the system environment variables,\" click \"Environment Variables,\" and check if <code>Node.js</code> is in the <code>Path</code> variable.</li> <li>Mac/Linux: Open a terminal and run:    <pre><code>echo $PATH\n</code></pre>    Look for <code>/usr/local/bin</code> in the output.</li> </ul> </li> </ol>"},{"location":"#clone-the-repository","title":"Clone the Repository","text":"<p>Alternatively, you can download the latest version of the project directly from the Releases Page. Simply download the .zip file, extract it, and proceed with the setup instructions below. If you are comfertiable using git then run the command below.</p> <p>Clone the repository using Git:</p> <pre><code>git clone -b stable https://github.com/stackblitz-labs/bolt.diy\n</code></pre>"},{"location":"#entering-api-keys","title":"Entering API Keys","text":"<p>There are two ways to configure your API keys in bolt.diy:</p>"},{"location":"#1-set-api-keys-in-the-envlocal-file","title":"1. Set API Keys in the <code>.env.local</code> File","text":"<p>When setting up the application, you will need to add your API keys for the LLMs you wish to use. You can do this by renaming the <code>.env.example</code> file to <code>.env.local</code> and adding your API keys there.</p> <ul> <li>On Mac, you can find the file at <code>[your name]/bolt.diy/.env.example</code>.</li> <li>On Windows/Linux, the path will be similar.</li> </ul> <p>If you can't see the file, it's likely because hidden files are not being shown. On Mac, open a Terminal window and enter the following command to show hidden files:</p> <pre><code>defaults write com.apple.finder AppleShowAllFiles YES\n</code></pre> <p>Make sure to add your API keys for each provider you want to use, for example:</p> <pre><code>GROQ_API_KEY=XXX\nOPENAI_API_KEY=XXX\nANTHROPIC_API_KEY=XXX\n</code></pre> <p>Once you've set your keys, you can proceed with running the app. You will set these keys up during the initial setup, and you can revisit and update them later after the app is running.</p> <p>Note: Never commit your <code>.env.local</code> file to version control. It's already included in the <code>.gitignore</code>.</p>"},{"location":"#2-configure-api-keys-directly-in-the-application","title":"2. Configure API Keys Directly in the Application","text":"<p>Alternatively, you can configure your API keys directly in the application once it's running. To do this:</p> <ol> <li>Launch the application and navigate to the provider selection dropdown.</li> <li>Select the provider you wish to configure.</li> <li>Click the pencil icon next to the selected provider.</li> <li>Enter your API key in the provided field.</li> </ol> <p>This method allows you to easily add or update your keys without needing to modify files directly.</p> <p>Once you've configured your keys, the application will be ready to use the selected LLMs.</p>"},{"location":"#run-the-application","title":"Run the Application","text":""},{"location":"#option-1-without-docker","title":"Option 1: Without Docker","text":"<ol> <li>Install Dependencies:</li> </ol> <pre><code>pnpm install\n</code></pre> <p>If <code>pnpm</code> is not installed, install it using:</p> <pre><code>sudo npm install -g pnpm\n</code></pre> <ol> <li>Start the Application:    <pre><code>pnpm run dev\n</code></pre>    This will start the Remix Vite development server. You will need Google Chrome Canary to run this locally if you use Chrome! It's an easy install and a good browser for web development anyway.</li> </ol>"},{"location":"#option-2-with-docker","title":"Option 2: With Docker","text":""},{"location":"#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Ensure Git, Node.js, and Docker are installed: Download Docker</li> </ul>"},{"location":"#steps","title":"Steps","text":"<ol> <li>Build the Docker Image:</li> </ol> <p>Use the provided NPM scripts:</p> <pre><code>npm run dockerbuild\n</code></pre> <p>Alternatively, use Docker commands directly:</p> <pre><code>docker build . --target bolt-ai-development\n</code></pre> <ol> <li>Run the Container:    Use Docker Compose profiles to manage environments:</li> </ol> <pre><code>docker compose --profile development up\n</code></pre> <ul> <li>With the development profile, changes to your code will automatically reflect in the running container (hot reloading).</li> </ul>"},{"location":"#update-your-local-version-to-the-latest","title":"Update Your Local Version to the Latest","text":"<p>To keep your local version of bolt.diy up to date with the latest changes, follow these steps for your operating system:</p>"},{"location":"#1-navigate-to-your-project-folder","title":"1. Navigate to your project folder","text":"<p>Navigate to the directory where you cloned the repository and open a terminal:</p>"},{"location":"#2-fetch-the-latest-changes","title":"2. Fetch the Latest Changes","text":"<p>Use Git to pull the latest changes from the main repository:</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"#3-update-dependencies","title":"3. Update Dependencies","text":"<p>After pulling the latest changes, update the project dependencies by running the following command:</p> <pre><code>pnpm install\n</code></pre>"},{"location":"#4-rebuild-and-start-the-application","title":"4. Rebuild and Start the Application","text":"<ul> <li>If using Docker, ensure you rebuild the Docker image to avoid using a cached version:</li> </ul> <pre><code>docker compose --profile development up --build\n</code></pre> <ul> <li>If not using Docker, you can start the application as usual with:   <pre><code>pnpm run dev\n</code></pre></li> </ul> <p>This ensures that you're running the latest version of bolt.diy and can take advantage of all the newest features and bug fixes.</p>"},{"location":"#adding-new-llms","title":"Adding New LLMs:","text":"<p>To make new LLMs available to use in this version of bolt.diy, head on over to <code>app/utils/constants.ts</code> and find the constant MODEL_LIST. Each element in this array is an object that has the model ID for the name (get this from the provider's API documentation), a label for the frontend model dropdown, and the provider.</p> <p>By default, Anthropic, OpenAI, Groq, and Ollama are implemented as providers, but the YouTube video for this repo covers how to extend this to work with more providers if you wish!</p> <p>When you add a new model to the MODEL_LIST array, it will immediately be available to use when you run the app locally or reload it. For Ollama models, make sure you have the model installed already before trying to use it here!</p>"},{"location":"#available-scripts","title":"Available Scripts","text":"<ul> <li><code>pnpm run dev</code>: Starts the development server.</li> <li><code>pnpm run build</code>: Builds the project.</li> <li><code>pnpm run start</code>: Runs the built application locally using Wrangler Pages. This script uses <code>bindings.sh</code> to set up necessary bindings so you don't have to duplicate environment variables.</li> <li><code>pnpm run preview</code>: Builds the project and then starts it locally, useful for testing the production build. Note, HTTP streaming currently doesn't work as expected with <code>wrangler pages dev</code>.</li> <li>`</li> </ul>"},{"location":"CONTRIBUTING/","title":"Guia de Contribui\u00e7\u00e3o","text":"<p>Bem-vindo ao guia de contribui\u00e7\u00e3o do bolt.diy! Este documento fornece informa\u00e7\u00f5es sobre como voc\u00ea pode contribuir para o projeto.</p>"},{"location":"CONTRIBUTING/#indice","title":"\u00cdndice","text":"<ul> <li>C\u00f3digo de Conduta</li> <li>Como Contribuir</li> <li>Diretrizes para Pull Requests</li> <li>Padr\u00f5es de C\u00f3digo</li> <li>Configura\u00e7\u00e3o do Ambiente de Desenvolvimento</li> <li>Testes</li> <li>Implanta\u00e7\u00e3o</li> <li>Implanta\u00e7\u00e3o com Docker</li> <li>Integra\u00e7\u00e3o com VS Code Dev Containers</li> </ul>"},{"location":"CONTRIBUTING/#codigo-de-conduta","title":"C\u00f3digo de Conduta","text":"<p>Ao contribuir para este projeto, voc\u00ea concorda em seguir nosso C\u00f3digo de Conduta.</p>"},{"location":"CONTRIBUTING/#como-contribuir","title":"Como Contribuir","text":"<ol> <li>Fa\u00e7a um fork do reposit\u00f3rio</li> <li>Crie uma branch para sua feature (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Fa\u00e7a commit das suas mudan\u00e7as (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Fa\u00e7a push para a branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Abra um Pull Request</li> </ol>"},{"location":"CONTRIBUTING/#diretrizes-para-pull-requests","title":"Diretrizes para Pull Requests","text":"<ul> <li>Mantenha os PRs pequenos e focados</li> <li>Inclua testes para novas funcionalidades</li> <li>Atualize a documenta\u00e7\u00e3o conforme necess\u00e1rio</li> <li>Siga os padr\u00f5es de c\u00f3digo estabelecidos</li> <li>Adicione uma descri\u00e7\u00e3o clara das mudan\u00e7as</li> </ul>"},{"location":"CONTRIBUTING/#padroes-de-codigo","title":"Padr\u00f5es de C\u00f3digo","text":"<ul> <li>Use TypeScript para todo o c\u00f3digo novo</li> <li>Siga o estilo de c\u00f3digo existente</li> <li>Mantenha o c\u00f3digo limpo e bem documentado</li> <li>Use nomes descritivos para vari\u00e1veis e fun\u00e7\u00f5es</li> <li>Escreva testes para novas funcionalidades</li> </ul>"},{"location":"CONTRIBUTING/#configuracao-do-ambiente-de-desenvolvimento","title":"Configura\u00e7\u00e3o do Ambiente de Desenvolvimento","text":"<ol> <li> <p>Clone o reposit\u00f3rio:    <pre><code>git clone https://github.com/stackblitz-labs/bolt.diy.git\ncd bolt.diy\n</code></pre></p> </li> <li> <p>Instale as depend\u00eancias:    <pre><code>pnpm install\n</code></pre></p> </li> <li> <p>Configure as vari\u00e1veis de ambiente:</p> </li> <li>Copie <code>.env.example</code> para <code>.env.local</code></li> <li> <p>Preencha as vari\u00e1veis necess\u00e1rias</p> </li> <li> <p>Inicie o servidor de desenvolvimento:    <pre><code>pnpm run dev\n</code></pre></p> </li> </ol>"},{"location":"CONTRIBUTING/#testes","title":"Testes","text":"<p>Execute os testes com: <pre><code>pnpm test\n</code></pre></p>"},{"location":"CONTRIBUTING/#implantacao","title":"Implanta\u00e7\u00e3o","text":"<p>Para implantar suas mudan\u00e7as:</p> <ol> <li>Certifique-se de que todos os testes passam</li> <li>Atualize a vers\u00e3o no <code>package.json</code></li> <li>Execute o script de implanta\u00e7\u00e3o:    <pre><code>pnpm run deploy\n</code></pre></li> </ol>"},{"location":"CONTRIBUTING/#implantacao-com-docker","title":"Implanta\u00e7\u00e3o com Docker","text":"<ol> <li> <p>Construa a imagem:    <pre><code>docker build -t bolt-diy .\n</code></pre></p> </li> <li> <p>Execute o container:    <pre><code>docker run -p 3000:3000 bolt-diy\n</code></pre></p> </li> </ol>"},{"location":"CONTRIBUTING/#integracao-com-vs-code-dev-containers","title":"Integra\u00e7\u00e3o com VS Code Dev Containers","text":"<ol> <li>Instale a extens\u00e3o \"Remote - Containers\" no VS Code</li> <li>Abra o projeto no VS Code</li> <li>Clique em \"Reopen in Container\" quando solicitado</li> </ol> <p>O ambiente de desenvolvimento ser\u00e1 configurado automaticamente dentro do container.</p>"},{"location":"FAQ/","title":"Perguntas Frequentes (FAQ)","text":""},{"location":"FAQ/#modelos-e-configuracao","title":"Modelos e Configura\u00e7\u00e3o","text":"Quais s\u00e3o os melhores modelos para o bolt.diy? <p>Para a melhor experi\u00eancia com o bolt.diy, recomendamos usar os seguintes modelos:</p> <pre><code>- **Claude 3.5 Sonnet (antigo)**: Melhor codificador geral, fornecendo excelentes resultados em todos os casos de uso\n- **Gemini 2.0 Flash**: Velocidade excepcional mantendo bom desempenho\n- **GPT-4o**: Forte alternativa ao Claude 3.5 Sonnet com capacidades compar\u00e1veis\n- **DeepSeekCoder V3**: Melhor modelo de c\u00f3digo aberto (dispon\u00edvel atrav\u00e9s do OpenRouter, API DeepSeek ou auto-hospedado)\n- **DeepSeekCoder V2 236b**: dispon\u00edvel atrav\u00e9s do OpenRouter, API DeepSeek ou auto-hospedado\n- **Qwen 2.5 Coder 32b**: Melhor modelo para auto-hospedagem com requisitos de hardware razo\u00e1veis\n\n!!! warning\n    Modelos com menos de 7b par\u00e2metros geralmente n\u00e3o t\u00eam a capacidade de interagir adequadamente com o bolt!\n</code></pre>"},{"location":"FAQ/#melhores-praticas","title":"Melhores Pr\u00e1ticas","text":"<p>??? question \"Como obter os melhores resultados com o bolt.diy?\" - Seja espec\u00edfico sobre sua stack:  Mencione os frameworks ou bibliotecas que voc\u00ea deseja usar (ex: Astro, Tailwind, ShadCN) em seu prompt inicial. Isso garante que o bolt.diy estruture o projeto de acordo com suas prefer\u00eancias.</p> <pre><code>- **Use o \u00edcone de aprimoramento de prompt**:\n  Antes de enviar seu prompt, clique no \u00edcone *aprimorar* para permitir que a IA refine seu prompt. Voc\u00ea pode editar as melhorias sugeridas antes de enviar.\n\n- **Estruture o b\u00e1sico primeiro, depois adicione recursos**:\n  Certifique-se de que a estrutura fundamental de sua aplica\u00e7\u00e3o esteja em vigor antes de introduzir funcionalidades avan\u00e7adas. Isso ajuda o bolt.diy a estabelecer uma base s\u00f3lida para construir.\n\n- **Agrupe instru\u00e7\u00f5es simples**:\n  Combine tarefas simples em um \u00fanico prompt para economizar tempo e reduzir o consumo de cr\u00e9ditos de API. Por exemplo:\n  *\"Altere o esquema de cores, adicione responsividade m\u00f3vel e reinicie o servidor de desenvolvimento.\"*\n</code></pre>"},{"location":"FAQ/#informacoes-do-projeto","title":"Informa\u00e7\u00f5es do Projeto","text":"Como posso contribuir para o bolt.diy? <p>Confira nosso Guia de Contribui\u00e7\u00e3o para mais detalhes sobre como se envolver!</p> Quais s\u00e3o os planos futuros para o bolt.diy? <p>Visite nosso Roteiro para as atualiza\u00e7\u00f5es mais recentes.  Novos recursos e melhorias est\u00e3o a caminho!</p> Por que existem tantos problemas/pull requests abertos? <p>O bolt.diy come\u00e7ou como um pequeno projeto de demonstra\u00e7\u00e3o no canal YouTube de @ColeMedin para explorar a edi\u00e7\u00e3o de projetos de c\u00f3digo aberto com LLMs locais. No entanto, rapidamente se transformou em um enorme esfor\u00e7o comunit\u00e1rio!</p> <pre><code>Estamos formando uma equipe de mantenedores para gerenciar a demanda e agilizar a resolu\u00e7\u00e3o de problemas. Os mantenedores s\u00e3o estrelas, e tamb\u00e9m estamos explorando parcerias para ajudar o projeto a prosperar.\n</code></pre>"},{"location":"FAQ/#comparacoes-de-modelos","title":"Compara\u00e7\u00f5es de Modelos","text":"Como os LLMs locais se comparam a modelos maiores como o Claude 3.5 Sonnet para o bolt.diy? <p>Embora os LLMs locais estejam melhorando rapidamente, modelos maiores como GPT-4o, Claude 3.5 Sonnet e DeepSeek Coder V2 236b ainda oferecem os melhores resultados para aplica\u00e7\u00f5es complexas. Nosso foco cont\u00ednuo \u00e9 melhorar os prompts, agentes e a plataforma para melhor suportar LLMs locais menores.</p>"},{"location":"FAQ/#solucao-de-problemas","title":"Solu\u00e7\u00e3o de Problemas","text":"Houve um erro ao processar esta solicita\u00e7\u00e3o <p>Esta mensagem de erro gen\u00e9rica significa que algo deu errado. Verifique ambos:</p> <pre><code>- O terminal (se voc\u00ea iniciou o aplicativo com Docker ou `pnpm`).\n\n- O console do desenvolvedor em seu navegador (pressione `F12` ou clique com o bot\u00e3o direito &gt; *Inspecionar*, depois v\u00e1 para a aba *Console*).\n</code></pre> cabe\u00e7alho x-api-key ausente <p>Este erro \u00e0s vezes \u00e9 resolvido reiniciando o cont\u00eainer Docker.  Se isso n\u00e3o funcionar, tente alternar do Docker para <code>pnpm</code> ou vice-versa. Estamos investigando ativamente este problema.</p> Visualiza\u00e7\u00e3o em branco ao executar o aplicativo <p>Uma visualiza\u00e7\u00e3o em branco geralmente ocorre devido a c\u00f3digo alucinado incorreto ou comandos incorretos.  Para solucionar problemas:</p> <pre><code>- Verifique o console do desenvolvedor para erros.\n\n- Lembre-se, as visualiza\u00e7\u00f5es s\u00e3o funcionalidades principais, ent\u00e3o o aplicativo n\u00e3o est\u00e1 quebrado! Estamos trabalhando para tornar esses erros mais transparentes.\n</code></pre> Tudo funciona, mas os resultados s\u00e3o ruins <p>LLMs locais como o Qwen-2.5-Coder s\u00e3o poderosos para aplica\u00e7\u00f5es pequenas, mas ainda s\u00e3o experimentais para projetos maiores. Para melhores resultados, considere usar modelos maiores como</p> <pre><code>- GPT-4o\n- Claude 3.5 Sonnet\n- DeepSeek Coder V2 236b\n</code></pre> Recebida exce\u00e7\u00e3o estruturada #0xc0000005: viola\u00e7\u00e3o de acesso <p>Se voc\u00ea est\u00e1 recebendo isso, provavelmente est\u00e1 no Windows. A corre\u00e7\u00e3o geralmente \u00e9 atualizar o Visual C++ Redistributable</p> Erros de Miniflare ou Wrangler no Windows <p>Voc\u00ea precisar\u00e1 ter certeza de que tem a vers\u00e3o mais recente do Visual Studio C++ instalada (14.40.33816), mais informa\u00e7\u00f5es aqui Github Issues</p>"},{"location":"FAQ/#obtenha-ajuda-e-suporte","title":"Obtenha Ajuda e Suporte","text":"<p>Suporte Comunit\u00e1rio</p> <p>Junte-se \u00e0 Comunidade bolt.diy para discuss\u00f5es e ajuda</p> <p>Reportar Problemas</p> <p>Abra um Problema em nosso Reposit\u00f3rio GitHub</p>"}]}